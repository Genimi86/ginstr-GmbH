/**
 * Copyright 2014 ginstr GmbH
 * 
 * This work is licensed under the Creative Commons Attribution-NonCommercial 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ 
 *  
 *  Unless required by applicable law or agreed to in writing, software 
 *  distributed under the License is distributed on an "AS IS" BASIS, 
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 *  See the License for the specific language governing permissions and 
 *  limitations under the License. 
 */
package com.ginstr.android.service.opencellid.upload;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningServiceInfo;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;

import com.ginstr.android.service.baseservice.BaseService;
import com.ginstr.android.service.opencellid.upload.data.MeasurementsUploaderService;
import com.ginstr.android.service.opencellid.upload.data.UploadConstants;

/**
 * <h2>General description</h2>
 * <p>
 * Used to upload data to OpenCellId servers. You can register on opencellid.org
 * to get a private key for data upload. However it's also possible to upload if
 * you don't have one and don't want to have one. If you set API key to null,
 * then the service will attempt to read an existing API key from external
 * storage (SD Card). If there is no key file there, service will connect to
 * OpenCellId servers and retrieve a random API key.
 * </p>
 * 
 * <h2>Usage</h2>
 * <p>
 * Your application manifest should hold the following permissions in order to
 * use this library: <br/>
 * android.permission.WRITE_EXTERNAL_STORAGE <br/>
 * android.permission.INTERNET <br/>
 * android.permission.ACCESS_FINE_LOCATION<br/>
 * android.permission.ACCESS_COARSE_LOCATION <br/>
 * android.permission.READ_PHONE_STATE <br/>
 * android.permission.WAKE_LOCK </br> android.permission.ACCESS_NETWORK_STATE
 * </p>
 * 
 * <p>
 * Also you should put a service tag in your AndroidManifest.xml to reference
 * the following: <br/>
 * <code>com.ginstr.android.service.opencellid.upload.data.MeasurementsUploaderService</code>
 * </p>
 * 
 * <p>
 * This service will connect to the database generated by
 * OpenCellIDCollectService on the SDCard. Only measurements which haven't been
 * marked as uploaded will be uploaded.
 * </p>
 * 
 * <p>
 * To instantiate this class you should do: <br/>
 * <br/>
 * <code>cellUploadService = new OpenCellIDUploadService(this);</code>
 * </p>
 * 
 * <p>
 * To run the service with your modified configuration parameters right from the
 * start, you should instantiate it with a {@link Bundle} of configuration
 * parameters found in ConfigurationConstants.
 * </p>
 * 
 * <p>
 * Any configuration you pass to the service using a setter function takes
 * effect when the service reaches a part of the code where changed variable is.
 * </p>
 * 
 * <p>
 * API key should be set if you want your uploads to be tied to your name. In
 * that case you have already registered for API key and got it in email: <br/>
 * <br/>
 * <code>
 * cellUploadService.setApiKey("2abcd-..."); // depends on what you get in email after registration 
 * </code>
 * </p>
 * 
 * <p>
 * After configuration you can start the service with {@link #startService()}
 * and stop it with {@link #stopService()}.<br/>
 * Configuration parameters can be changed also when the service is running.
 * Every setter will pass a changed value to the broadcast receiver in the
 * service and it will take effect immediately or after some internal operation
 * runs another time.
 * </p>
 * 
 * @author Danijel
 * @author Dinko Ivkovic
 * 
 */
public class OpenCellIDUploadService extends BaseService
{

	private Intent serviceIntent;

	/**
	 * Used to retrieve progress info from Upload service. Register a
	 * BroadcastReceiver to retrieve extras.
	 */
	public static final String BROADCAST_PROGRESS_ACTION = "com.ginstr.android.service.opencellid.MeasurementsUploaderService.PROGRESS";

	/**
	 * Used to retrieve an integer which denotes the maximum number of cells for
	 * upload.
	 */
	public static final String XTRA_MAXPROGRESS = "maxProgressMade";

	/**
	 * Used to retrieve an integer which denotes the number of currently
	 * uploaded cells.
	 */
	public static final String XTRA_PROGRESS = "progressMade";
	/**
	 * Retrieve boolean if upload operation is complete or not.
	 */
	public static final String XTRA_DONE = "done";
	/**
	 * Retrieve boolean if upload was successful.
	 */
	public static final String XTRA_SUCCESS = "success";
	/**
	 * Retrieve error message if XTRA_SUCCESS returns false.
	 */
	public static final String XTRA_FAILURE_MSG = "failure.message";

	/**
	 * service configuration parameters
	 */
	String appId;
	String apiKey;
	String openCellIdUploadUrl;
	String networksUploadUrl;
	long newDataCheckInterval = UploadConstants.NEW_DATA_CHECK_INTERVAL_LONG_DEFAULT;
	boolean wifiOnlyUpload = UploadConstants.PREF_ONLY_WIFI_UPLOAD_DEFAULT;
	boolean testEnvironment = UploadConstants.PREF_TEST_ENVIRONMENT;

	/**
	 * OpenCellIDUploadService constructor
	 * @param context
	 * @param appId
	 * @throws Exception if the appId is invalid
	 */
	public OpenCellIDUploadService(Context context, String appId) throws Exception 
	{
		super(context, "OPENCELLID_UPLOAD");
		
		if (isAppIdValid(appId))
		{
			this.appId=appId + " " + getVersion(context); 
		}
		else
		{
			throw new IllegalArgumentException(UploadConstants.CONSTRUCTOR_EXCEPTION_MESSAGE);
		}
		
		serviceIntent = new Intent(getContext(), MeasurementsUploaderService.class);
	}

	/**
	 * Use {@link #startService()} to start the service.
	 */
	public void onServiceStart()
	{
		if (!isStarted())
		{
			//provide service intent with parameters
			serviceIntent.putExtra(UploadConstants.PREF_APPID_KEY, appId);
			serviceIntent.putExtra(UploadConstants.PREF_API_KEY, apiKey);
			serviceIntent.putExtra(UploadConstants.PREF_OPENCELL_UPLOAD_URL_KEY, openCellIdUploadUrl);
			serviceIntent.putExtra(UploadConstants.PREF_NEW_DATA_CHECK_INTERVAL_KEY, newDataCheckInterval);
			serviceIntent.putExtra(UploadConstants.PREF_ONLY_WIFI_UPLOAD_KEY, wifiOnlyUpload);
			serviceIntent.putExtra(UploadConstants.PREF_OPENCELL_NETWORK_UPLOAD_URL_KEY, networksUploadUrl);
			serviceIntent.putExtra(UploadConstants.PREF_TEST_ENVIRONMENT_KEY, testEnvironment);

			//start upload service
			getContext().startService(serviceIntent);
		}
	}

	/**
	 * Use {@link #stopService()} to stop the service.
	 */
	public void onServiceStop()
	{
		getContext().stopService(serviceIntent);
	}

	/**
	 * Checks to see if the service is already started.
	 *  
	 * @return true if service is running
	 */
	@Override
	public boolean isStarted()
	{
		ActivityManager manager = (ActivityManager) getContext().getSystemService(Context.ACTIVITY_SERVICE);
		for (RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE))
		{
			if (MeasurementsUploaderService.class.getName().equals(service.service.getClassName()))
			{
				return true;
			}
		}

		return false;
	}

	/**
	 * API key used to upload data to OpenCellID servers. You have to register
	 * on opencellid.org to get your key. By default it's an empty string so you
	 * won't be able to upload if you don't set the value.
	 * 
	 * @param key
	 */
	public void setApiKey(String key)
	{
		apiKey = key;

		Intent cfg = new Intent(UploadConstants.CONFIGURATION_ACTION);
		cfg.putExtra(UploadConstants.PREF_API_KEY, key);
		getContext().sendBroadcast(cfg);
	}

	/**
	 * Set the URL of OpenCellId community servers.
	 * 
	 * @param openCellIdUploadUrl
	 */
	public void setOpenCellIdUploadUrl(String openCellIdUploadUrl)
	{
		this.openCellIdUploadUrl = openCellIdUploadUrl;

		Intent cfg = new Intent(UploadConstants.CONFIGURATION_ACTION);
		cfg.putExtra(UploadConstants.PREF_OPENCELL_UPLOAD_URL_KEY, openCellIdUploadUrl);
		getContext().sendBroadcast(cfg);
	}

	/**
	 * Sets the interval for checking of new data. If there is new data, it will
	 * be uploaded.
	 * 
	 * @param newDataCheckInterval
	 *            in milliseconds - should be around 30000 or so
	 */
	public void setNewDataCheckInterval(long newDataCheckInterval)
	{
		this.newDataCheckInterval = newDataCheckInterval;

		Intent cfg = new Intent(UploadConstants.CONFIGURATION_ACTION);
		cfg.putExtra(UploadConstants.PREF_NEW_DATA_CHECK_INTERVAL_KEY, newDataCheckInterval);
		getContext().sendBroadcast(cfg);
	}

	/**
	 * If true, upload service will only upload through WiFi network.
	 * 
	 * @param wifiOnly
	 */
	public void setWifiOnlyUpload(boolean wifiOnly)
	{
		wifiOnlyUpload = wifiOnly;

		Intent cfg = new Intent(UploadConstants.CONFIGURATION_ACTION);
		cfg.putExtra(UploadConstants.PREF_ONLY_WIFI_UPLOAD_KEY, wifiOnly);
		getContext().sendBroadcast(cfg);
	}

	/**
	 * Sets the URL used to upload networks to.
	 * 
	 * @param url
	 */
	public void setNetworksUploadUrl(String url)
	{
		networksUploadUrl = url;

		Intent cfg = new Intent(UploadConstants.CONFIGURATION_ACTION);
		cfg.putExtra(UploadConstants.PREF_OPENCELL_NETWORK_UPLOAD_URL_KEY, url);
		getContext().sendBroadcast(cfg);
	}

	/**
	 * If true, upload service will only upload through WiFi network.
	 * 
	 * @param wifiOnly
	 */
	public void setTestEnvironment(boolean testActive)
	{
		testEnvironment = testActive;

		Intent cfg = new Intent(UploadConstants.CONFIGURATION_ACTION);
		cfg.putExtra(UploadConstants.PREF_TEST_ENVIRONMENT_KEY, testActive);
		getContext().sendBroadcast(cfg);
	}

	/**
	 * checks if the appId parameter is set
	 * @param appId
	 * @return true if the parameter is set, false otherwise
	 */
	private static boolean isAppIdValid(String appId)
	{
		if (appId == null || appId.equals(""))
		{
			return false;
		} else
		{
			if (appId.contains(" "))
			{
				return false;
			}
		}

		return true;
	}

	/**
	 * gets the application version code
	 * @param context
	 * @return version code
	 */
	public static int getVersion(Context context)
	{
		try
		{
			String packageName = context.getApplicationContext().getPackageName();
			
			PackageInfo pkgInfo = context.getPackageManager().getPackageInfo(packageName, 0);

			return pkgInfo.versionCode;
		} catch (Exception e)
		{
			return -1;
		}
	}
}
